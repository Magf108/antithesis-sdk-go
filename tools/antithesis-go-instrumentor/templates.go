package main

import (
	"io"
	"text/template"
)

// InstrumentationResult comprises the two outputs of the Go instrumentor,
// namely the name of the symbol table (no directories), and the
// count of edges.
type instrumentationResult struct {
	Package     string
	SymbolTable string
	EdgeCount   int
}

const rawTemplate = `// Code generated by Antithesis instrumentor; DO NOT EDIT.
package {{.Package}}

import (
	"antithesis.com/go/instrumentation"
)

func init() {
	instrumentation.InitializeModule("{{.SymbolTable}}", {{.EdgeCount}})
}

func Notify(edge int) {
	instrumentation.Notify(edge)
}
`

// CreateShimSource takes the outputs of the Antithesis Go instrumentor
// and produces a .go file that must be added to the instrumented
// code base. It's the shin's Notify() function that must be called,
// so that its init() function will be called for us by Go.
func CreateShimSource(shimPkg string, symbolTable string, edgeCount int, writer io.Writer) {
	result := instrumentationResult{shimPkg, symbolTable, edgeCount}
	tmpl, err := template.New("wrapper").Parse(rawTemplate)
	if err != nil {
		panic(err)
	}
	err = tmpl.Execute(writer, result)
	if err != nil {
		panic(err)
	}
}
